# app/main.py
import os
import json
import signal
import logging
import threading
import requests
from datetime import datetime, timedelta
from flask import Flask
from apscheduler.schedulers.background import BackgroundScheduler
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
lock = threading.Lock()

class Config:
    TG_TOKEN = os.getenv("TG_TOKEN")
    TG_CHANNEL = os.getenv("TG_CHANNEL")
    YT_KEY = os.getenv("YT_KEY")
    YT_CHANNEL_ID = os.getenv("YT_CHANNEL_ID")
    STATE_FILE = "bot_state.json"
    CHECK_INTERVAL = 10  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö

class StateManager:
    def __init__(self):
        self._state = self._load_state()
        self.last_sent = None  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏

    @property
    def state(self):
        return self._state.copy()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è

    def _load_state(self):
        try:
            with open(Config.STATE_FILE, 'r') as f:
                data = json.load(f)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {json.dumps(data, indent=2)}")
                return data
        except (FileNotFoundError, json.JSONDecodeError):
            logger.warning("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
            return self._create_default_state()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
            return self._create_default_state()

    def _create_default_state(self):
        return {'last_video_id': None, 'initialized': False}

    def update_and_save(self, new_state):
        with lock:
            self._state.update(new_state)
            try:
                with open(Config.STATE_FILE, 'w') as f:
                    json.dump(self._state, f, indent=2)
                logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {json.dumps(self._state, indent=2)}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

state_manager = StateManager()

@app.route('/')
def health_check():
    return {
        "status": "running",
        "last_video": state_manager.state['last_video_id'],
        "initialized": state_manager.state['initialized']
    }, 200

class YouTubeService:
    @staticmethod
    def get_latest_video():
        try:
            youtube = build('youtube', 'v3', developerKey=Config.YT_KEY)
            request = youtube.search().list(
                part="snippet",
                channelId=Config.YT_CHANNEL_ID,
                maxResults=1,
                order="date",
                type="video"
            )
            response = request.execute()
            logger.debug(f"YouTube API Response: {json.dumps(response, indent=2)}")
            return response
        except HttpError as e:
            logger.error(f"YouTube API Error: {e}")
            return None
        except Exception as e:
            logger.error(f"YouTube Service Error: {e}")
            return None

class TelegramService:
    @staticmethod
    def send_alert(video_data):
        if not all([Config.TG_TOKEN, Config.TG_CHANNEL]):
            logger.error("Telegram credentials missing!")
            return False

        message = (
            f"üé• –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ!\n\n"
            f"<b>{video_data['title']}</b>\n\n"
            f"–°—Å—ã–ª–∫–∞: https://youtu.be/{video_data['id']}"
        )
        
        try:
            response = requests.post(
                f"https://api.telegram.org/bot{Config.TG_TOKEN}/sendMessage",
                json={
                    'chat_id': Config.TG_CHANNEL,
                    'text': message,
                    'parse_mode': 'HTML'
                },
                timeout=25  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
            )
            response.raise_for_status()
            return True
        except requests.exceptions.HTTPError as e:
            logger.error(f"Telegram HTTP Error: {e.response.text}")
        except Exception as e:
            logger.error(f"Telegram Send Error: {str(e)}")
        return False

def check_video_task():
    with lock:  # –ü–æ–ª–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏
        logger.info("\n" + "="*40)
        logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–µ–æ")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        response = YouTubeService.get_latest_video()
        if not response or not response.get('items'):
            return

        try:
            video = response['items'][0]
            current_id = video['id']['videoId']
            title = video['snippet']['title']
            published_at = datetime.fromisoformat(
                video['snippet']['publishedAt'].replace('Z', '+00:00')
            )
        except KeyError as e:
            logger.error(f"Invalid YouTube response: {e}")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤–∏–¥–µ–æ
        time_diff = datetime.utcnow() - published_at
        if time_diff > timedelta(minutes=Config.CHECK_INTERVAL * 2):
            logger.warning(f"–ü—Ä–æ–ø—É—Å–∫ —Å—Ç–∞—Ä–æ–≥–æ –≤–∏–¥–µ–æ ({time_diff} old)")
            return

        # –†–∞–±–æ—Ç–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        current_state = state_manager.state
        
        if not current_state['initialized']:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è")
            state_manager.update_and_save({
                'last_video_id': current_id,
                'initialized': True
            })
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if current_id != current_state['last_video_id'] and current_id != state_manager.last_sent:
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ: {current_id}")
            if TelegramService.send_alert({'id': current_id, 'title': title}):
                state_manager.last_sent = current_id
                state_manager.update_and_save({'last_video_id': current_id})
                logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        else:
            logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ")

scheduler = BackgroundScheduler()
scheduler.add_job(
    check_video_task,
    'interval',
    minutes=Config.CHECK_INTERVAL,
    max_instances=1,
    coalesce=True,
    misfire_grace_time=300
)

def graceful_shutdown(signum, frame):
    logger.info("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    scheduler.shutdown(wait=False)
    state_manager.update_and_save(state_manager.state)
    logger.info("–°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def create_app():
    signal.signal(signal.SIGTERM, graceful_shutdown)
    signal.signal(signal.SIGINT, graceful_shutdown)
    
    if not scheduler.running:
        scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    
    try:
        check_video_task()
    except Exception as e:
        logger.error(f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
    
    return app

if __name__ == "__main__":
    create_app().run(host='0.0.0.0', port=8000)
