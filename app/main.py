# app/main.py
import os
import json
import signal
import logging
import threading
import requests
from flask import Flask
from apscheduler.schedulers.background import BackgroundScheduler
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,  # –£—Ä–æ–≤–µ–Ω—å DEBUG –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
lock = threading.Lock()

class Config:
    TG_TOKEN = os.getenv("TG_TOKEN")
    TG_CHANNEL = os.getenv("TG_CHANNEL")
    YT_KEY = os.getenv("YT_KEY")
    YT_CHANNEL_ID = os.getenv("YT_CHANNEL_ID")
    STATE_FILE = "bot_state.json"
    CHECK_INTERVAL = 10  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö

class StateManager:
    def __init__(self):
        self.state = self._load_state()

    def _load_state(self):
        try:
            with open(Config.STATE_FILE, 'r') as f:
                data = json.load(f)
                logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {data}")
                return data
        except FileNotFoundError:
            logger.warning("–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ.")
            return self._create_default_state()
        except json.JSONDecodeError:
            logger.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—é.")
            return self._create_default_state()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}")
            return {'last_video_id': None, 'initialized': False}

    def _create_default_state(self):
        default_state = {'last_video_id': None, 'initialized': False}
        with open(Config.STATE_FILE, 'w') as f:
            json.dump(default_state, f)
        return default_state

    def save_state(self):
        try:
            with open(Config.STATE_FILE, 'w') as f:
                json.dump(self.state, f)
            logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}")

state_manager = StateManager()

@app.route('/')
def health_check():
    return {"status": "running", "last_checked": state_manager.state.get('last_video_id')}, 200

@app.route('/test_telegram')
def test_telegram():
    """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    test_message = "üöÄ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞!"
    try:
        response = requests.post(
            f"https://api.telegram.org/bot{Config.TG_TOKEN}/sendMessage",
            json={
                'chat_id': Config.TG_CHANNEL,
                'text': test_message,
                'parse_mode': 'HTML'
            },
            timeout=10
        )
        response.raise_for_status()
        return {"status": "success", "message": "–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"}, 200
    except Exception as e:
        logger.error(f"–¢–µ—Å—Ç Telegram –ø—Ä–æ–≤–∞–ª–µ–Ω: {str(e)}")
        return {"status": "error", "message": str(e)}, 500

class YouTubeService:
    @staticmethod
    def get_latest_video():
        try:
            youtube = build('youtube', 'v3', developerKey=Config.YT_KEY)
            request = youtube.search().list(
                part="snippet",
                channelId=Config.YT_CHANNEL_ID,
                maxResults=1,
                order="date",
                type="video"
            )
            response = request.execute()
            logger.debug(f"–û—Ç–≤–µ—Ç YouTube API: {json.dumps(response, indent=2)}")
            return response
        except HttpError as e:
            logger.error(f"–û—à–∏–±–∫–∞ YouTube API: {e}")
            return None
        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ YouTubeService: {e}")
            return None

class TelegramService:
    @staticmethod
    def send_alert(video_data):
        if not all([Config.TG_TOKEN, Config.TG_CHANNEL]):
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram!")
            return False

        message = (
            f"üé• –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ!\n\n"
            f"<b>{video_data['title']}</b>\n\n"
            f"–°—Å—ã–ª–∫–∞: https://youtu.be/{video_data['id']}"
        )
        
        try:
            response = requests.post(
                f"https://api.telegram.org/bot{Config.TG_TOKEN}/sendMessage",
                json={
                    'chat_id': Config.TG_CHANNEL,
                    'text': message,
                    'parse_mode': 'HTML'
                },
                timeout=15
            )
            response.raise_for_status()
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True
        except requests.exceptions.HTTPError as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP: {e.response.text}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {str(e)}")
            return False

def check_video_task():
    with lock:
        logger.info("\n" + "="*40)
        logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–µ–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ YouTube
        response = YouTubeService.get_latest_video()
        if not response:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å YouTube")
            return

        items = response.get('items', [])
        if not items:
            logger.warning("–í –æ—Ç–≤–µ—Ç–µ YouTube –Ω–µ—Ç –≤–∏–¥–µ–æ")
            return

        try:
            video = items[0]
            current_id = video['id']['videoId']
            title = video['snippet']['title']
            logger.info(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ: {current_id} - {title}")
        except KeyError as e:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ YouTube: {e}")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state = state_manager.state
        logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")

        if not state['initialized']:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–≤—ã–º –≤–∏–¥–µ–æ")
            state.update(last_video_id=current_id, initialized=True)
            state_manager.save_state()
            return

        if current_id != state['last_video_id']:
            logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ! –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
            video_data = {'id': current_id, 'title': title}
            
            if TelegramService.send_alert(video_data):
                state['last_video_id'] = current_id
                state_manager.save_state()
                logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        else:
            logger.info("–ù–æ–≤—ã—Ö –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

scheduler = BackgroundScheduler()
scheduler.add_job(
    check_video_task,
    'interval',
    minutes=Config.CHECK_INTERVAL,
    max_instances=1,
    coalesce=True,
    misfire_grace_time=300
)

def graceful_shutdown(signum, frame):
    logger.info("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    scheduler.shutdown()
    state_manager.save_state()
    logger.info("–°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def create_app():
    signal.signal(signal.SIGTERM, graceful_shutdown)
    signal.signal(signal.SIGINT, graceful_shutdown)
    
    if not scheduler.running:
        scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")
    
    try:
        check_video_task()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
    
    return app

if __name__ == "__main__":
    create_app().run(host='0.0.0.0', port=8000)
